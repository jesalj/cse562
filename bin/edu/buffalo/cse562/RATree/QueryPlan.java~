package edu.buffalo.cse562.RATree;

import edu.buffalo.cse562.Operators.ExtendedProjectionOperator;
import edu.buffalo.cse562.Operators.GroupBy;
import edu.buffalo.cse562.Operators.Having;
import edu.buffalo.cse562.Operators.InnerJoin;
import edu.buffalo.cse562.Operators.LimitOperator;
import edu.buffalo.cse562.Operators.Operator;
import edu.buffalo.cse562.Operators.OrderByOperator;
import edu.buffalo.cse562.Operators.ScanOperator;
import edu.buffalo.cse562.Operators.SelectionOperator;
import edu.buffalo.cse562.SqlParser.TablesO;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import net.sf.jsqlparser.statement.select.Distinct;
import net.sf.jsqlparser.statement.select.FromItem;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.Limit;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SelectItem;
import net.sf.jsqlparser.statement.select.SubSelect;
import net.sf.jsqlparser.statement.select.Union;

public class QueryPlan {

    String operation;
    HashMap<String,Expression>  tuple = new HashMap<>();
    ArrayList<HashMap<String,Expression>> tuples=new ArrayList<>();

    public Operator trav(Node n, HashMap<String, TablesO> parsedTables) {
        if (n == null) {
            return null;
        }

        Operator o1= trav(n.getLeft(), parsedTables);
        Operator o2= trav(n.getRight(), parsedTables);

        //System.out.println(n.getOptName() + "Priority" + n.getPriority());
        operation = n.getOptName();
        //System.out.println("---- QueryPlan.operation ---- " + operation);
        switch (operation) {
            case "FROM":
                //System.out.println("\nScan operator\n-----------------");
                //System.out.println("New Scan Operator created");
                ArrayList <Object> list =(ArrayList <Object>)n.getValue();
                ScanOperator sc = null;
                String alias=null;
                TablesO table = new TablesO();
                for(Object o: list){
                    FromItem from=(FromItem)o;
                    
                    if(from.getAlias()!=null){
                        alias=from.getAlias();
                        table=parsedTables.get(from.toString().substring(0, from.toString().indexOf(' ')));
                    }
                    else if (from.getAlias()==null){
                        table=parsedTables.get(from.toString().toUpperCase());
                        alias=table.getTableName();
                    }
                    
                    File filepath=table.getFilePath();
                    //System.out.println(filepath);
                    //HashMap <String,ColumnDefinition> schema=table.getSchema();
                    ArrayList<ColumnDefinition> schema = table.getSchema();
                    
                    sc = new ScanOperator(filepath,schema,alias);
                    //tuple = sc.getTuple();
                    list.remove(o);
                    break;
                    //System.out.println(tuple);
                }
                return sc;
            case "WHERE":
                //System.out.println("\nSelection Operator\n---------------");
                //System.out.println("New Selection Operator created");
                list =(ArrayList <Object>)n.getValue();
               
                SelectionOperator sel= new SelectionOperator(o2,list);
                /*
                while(sel.getTuple()!=null){
                    //System.out.println(sel.getTuple());
                }
                */
                return sel;
                
            case "HAVING":
                //System.out.println("HAVING Operator\n---------------");
                //System.out.println("New Having Operator created");
                list =(ArrayList <Object>)n.getValue();
               
                Having hopt= new Having(o2,list);
               // System.out.println(gopt.getTuple());
               
                return hopt;          
             
            case "GROUPBY":
                //System.out.println("\nGROUPBY Operator\n---------------");
                //System.out.println("New Groupby Operator created");
                list =(ArrayList <Object>)n.getValue();
                
                ArrayList <Object> groupbyList = (ArrayList <Object>)n.getsecOperation();
                GroupBy gopt= new GroupBy(o2,list,groupbyList);
               // System.out.println(gopt.getTuple());
               
                return gopt;        
                
            case "SELECT":
                //System.out.println("\nProjection Operator\n---------------");
                
                //System.out.println("New Projection Operator created");
                list =(ArrayList <Object>)n.getValue();
                
                ExtendedProjectionOperator proj=new ExtendedProjectionOperator(o2,list);
                
                /*while((tuple=proj.getTuple())!=null){
                    tuples.add(tuple);
                    tuple=new HashMap<>();
                }*/
                //System.out.println(tuples);
                
                //System.out.println(proj.getTuple());
                
                return proj;
                
            case "JOIN":
                //System.out.println("\nJoin Operation\n----------------");
                //System.out.println("New Join Operator created");
                //list =(ArrayList <Object>)n.getValue();
                
                //System.out.println(list);
                //System.out.println(o2);
                
                InnerJoin join=new InnerJoin(o1,o2);
                
                /*while((tuple=join.getTuple())!=null){
                    //System.out.println(tuple);
                }*/
                
                //System.out.println("Query Plan : get tuple"+join.getTuple());
                return join;  
            case "ORDERBY":
            	//System.out.println("\nOrderBy Operation\n----------------");
            	//System.out.println("New OrderBy Operator created");
            	
            	list = (ArrayList<Object>) n.getValue();
            	OrderByOperator orderBy = new OrderByOperator(o2, list);
            	//System.out.println(orderBy.getTuple());
            	return orderBy;
            case "LIMIT":
            	list = (ArrayList<Object>) n.getValue();
            	LimitOperator limitOp = new LimitOperator(o2, list);
            	return limitOp;
            default:
                System.out.println("Error in tree trav");

        }
        return null;
    }
}
